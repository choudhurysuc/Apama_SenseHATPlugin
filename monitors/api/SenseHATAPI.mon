package com.apamax.sensehat;
using com.apama.exceptions.Exception;

event LEDMatrix 
{
	import "SenseHATPlugin" as sense;
	
	/**
    * Switch rotation/orientation of display
    *
    * @param rotation rotation angle
    */
	action setRotation(integer rotation)
	{
		sense.setRotation(rotation);
	}
	
	
	/**
    * Set all pixels on display
    *
    * @param pixels array of 64 pixels which represents display 8x8 points
    */	
	action setPixels(sequence<Color> pixels)
	{
		if not pixels.size() = 64 then
		{
			throw Exception("Array must have 64 items -> 8x8 points!","IllegalArgumentException");
		}
		
		sequence <sequence <integer> > RGBelementList := new sequence <sequence <integer> >;
		
		Color c;
		for c in pixels
		{
			sequence <integer> RGBelement := new sequence < integer > ;
			RGBelement.append(c.R());
			RGBelement.append(c.G());
			RGBelement.append(c.B());
			RGBelementList.append(RGBelement);
		}
		
		sense.setPixels(RGBelementList);
	}
	
	/**
    * Set specific pixel
    *
    * @param x     index 0-7
    * @param y     index 0-7
    * @param color color (R,G,B)
    */
	
	action setPixel(integer x, integer y, Color color)
	{
		sense.setPixel(x, y, color.R(), color.G(), color.B() );
	}
	
	
	/**
    * Clear display (blank/off)
    */
	action clear()
	{
		sense.clear();
	}
	
	/**
    * Clear display - set all pixels to specific color
    *
    * @param color color
    */
	action Clear(Color color)
	{
		sense.Clear(color.R(), color.G(), color.B());
	}
	
	/**
    * Show message
    *
    * @param message message
    */
	action showMessage(string message)
	{
		sense.showMessage(message);
	}
	
	/**
    * Show message
    *
    * @param message message
	* @param scrollSpeed scrolling speed
    */
	action showMessageWithSpeed(string message, float scrollSpeed)
	{
		showMessageWithParam(message, scrollSpeed, Color.Of(255, 255, 255),Color.Of(0, 0, 0));
	}	
	
	/**
    * Show message with specific parameters
    *
    * @param message     message
    * @param scrollSpeed speed
    * @param textColor   text color
    * @param backColor   background color
    */
	action showMessageWithParam(string message, float scrollSpeed, Color textColor, Color backColor)
	{
		sequence<integer> texColor := new sequence<integer>;
		texColor.append(textColor.R());
		texColor.append(textColor.G());
		texColor.append(textColor.B());
		
		sequence<integer> bgc := new sequence<integer>;
		bgc.append(backColor.R());
		bgc.append(backColor.G());
		bgc.append(backColor.B());
		
		
		sense.displayMessage(message, scrollSpeed, texColor, bgc );
	}
	
	
	 /**
    * Show letter
    *
    * @param letter letter
    */
	action showLetter(string letter) 
	{        
        if letter.length() != 1 then
		{
            throw Exception("Only one letter is supported!","IllegalArgumentException");
        }
        
        sense.showLetter(letter);
	}	
	
	 /**
    * Set low light of matrix
    *
    * @param lowLight true/false
    */
	action lowLight(boolean lowLight)
	{
		sense.lowLight(lowLight);
	}
	
	
	 /**
    * Loads an image file, converts it to RGB format and displays it on the LED matrix. The image must be 8 x 8 pixels in size.
    *
    * @param imagewithPath image path
    */
	
	action loadImage(string imagewithPath)
	{
		 sense.loadImage(imagewithPath);
	}
}


event EnvironmentalSensors
{
	import "SenseHATPlugin" as sense;
	
	
	/**
    * Gets the percentage of relative humidity from the humidity sensor
    *
    * @return the percentage of relative humidity
    */
	
	action getHumidity() returns float
	{
		return sense.getHumidity();
	}	
	
	
	/**
    *  @return the current temperature in degrees Celsius
    */	
	action getTemperature() returns float
	{
		return sense.getTemperature();
	}
	
	
	/**
    * Gets the current temperature in degrees Celsius from the humidity sensor
    *
    * @return the current temperature in degrees Celsius
    */	
	action getTemperatureFromHumidity() returns float
	{
		return sense.getTemperatureFromHumidity();
	}
	
	
	 /**
    * Gets the current temperature in degrees Celsius from the pressure sensor
    *
    * @return the current temperature in degrees Celsius
    */
	action getTemperatureFromPressure() returns float
	{
		return sense.getTemperatureFromPressure();
	}
	
	
	/**
    * Gets the current pressure in Millibars from the pressure sensor
    *
    * @return the current pressure in Millibars
    */
	action getPressure() returns float
	{
		return sense.getPressure();
	}
} 

event Joystick
{	
	import "SenseHATPlugin" as sense; 
	
	 /**
    * Blocks execution until a joystick event occurs
    *
    * @return event type which occured
    */
	action waitForEvent() returns JoystickEvent
	{		
		return WaitForEvent(false);
	}	
	
	
	/**
    * Blocks execution until a joystick event occurs
    *
    * @param emptyBuffer can be used to flush any pending events before waiting for new events
    * @return event type which occured
    */
	
	action WaitForEvent(boolean emptyBuffer) returns JoystickEvent
	{
		 InputEvent jevt :=  sense.waitForEvent(emptyBuffer);
		 
		 return JoystickEvent.create(jevt.actionValue, jevt.directionValue, jevt.timestamp);
	}	
	
	
	/**
    * Returns a list of Joystick events representing all events that have occurred since the last call to getEvents or waitForEvent
    *
    * @return list of events
    */
	
	action getEvents() returns sequence< JoystickEvent >
	{
		sequence< JoystickEvent > JoystickEventList := new sequence< JoystickEvent >;
				
		sequence< InputEvent > InputEventList := sense.getEvents();
		
		InputEvent jevt;
		
		for jevt in InputEventList
		{
			JoystickEvent jsEvt := JoystickEvent.create(jevt.actionValue, jevt.directionValue, jevt.timestamp);
			JoystickEventList.append(jsEvt);
		}
		
		return JoystickEventList;
	}
}

event IMU
{
	import "SenseHATPlugin" as sense; 
	
	
	/**
 	Enables and disables the gyroscope, accelerometer and/or magnetometer contribution to the get orientation functions
 
 	@param compassEnabled :        enable compass
 	@param gyroscopeEnabled :      enable gyroscope
  	@param accelerometerEnabled :  enable accelerometer  	
 	*/
	action setIMUConfig(boolean compassEnabled, boolean gyroscopeEnabled, boolean accelerometerEnabled)
	{
		sense.setIMUConfig(compassEnabled, gyroscopeEnabled, accelerometerEnabled);
	}
	
	
	/**
	Gets the current orientation in radians using the aircraft principal axes of pitch, roll and yaw
	 
	@return event with pitch, roll and yaw values. Values are floats representing the angle of the axis in radians
	*/
	
	action getOrientationRadians() returns com.apamax.sensehat.IMUData
	{
		return sense.getOrientationRadians();
	}
	
	 
	/**
	Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw
    
 	@return event with pitch, roll and yaw values. Values are Floats representing the angle of the axis in degrees
	*/
	
	action getOrientationDegrees() returns com.apamax.sensehat.IMUData
	{
		return sense.getOrientationDegrees();
	}
	
	 
	/**
	@return event with pitch, roll and yaw representing the angle of the axis in degrees
	*/
	
	action getOrientation() returns com.apamax.sensehat.IMUData
	{
		return sense.getOrientation();
	}
	
	 
	/**
	Disable the gyroscope and accelerometer then gets the direction of North from the magnetometer in degrees
 
 	@return The direction of North
	*/
	
	action getCompass() returns float
	{
		return sense.getCompass();
	}		
	
	/**
	Gets the raw x, y and z axis magnetometer data     
 	@return event representing the magnetic intensity of the axis in microteslas (uT)
	*/
	
	action getCompassRaw() returns com.apamax.sensehat.IMUDataRaw
	{
		return sense.getCompassRaw();
	}
	
	/**
	Disable the magnetometer and accelerometer
 	then gets the current orientation from the gyroscope only
 	
 	@return event with pitch, roll and yaw representing the angle of the axis in degrees
	*/
	
 	action getGyroscope() returns com.apamax.sensehat.IMUData
	{
		return sense.getGyroscope();
	}
 	                                   
	/**
 	Gets the raw x, y and z axis gyroscope data     
 	@return event representing the rotational intensity of the axis in radians per second
 	*/
 	action getGyroscopeRaw() returns com.apamax.sensehat.IMUDataRaw
	{
		return sense.getGyroscopeRaw();
	}
		
	
 	/** 	
    Disable the magnetometer and gyroscope 
 	then gets the current orientation from the accelerometer only
 	*/
 	action getAccelerometer() returns com.apamax.sensehat.IMUData
	{
		return sense.getAccelerometer();
	}
 	
	/**
 	Gets the raw x, y and z axis accelerometer data    
 	@return event representing the acceleration intensity of the axis in Gs
 	*/
 	action getAccelerometerRaw() returns com.apamax.sensehat.IMUDataRaw
	{
		return sense.getAccelerometerRaw();
	}
		
	 
}

/** Main SenseHat object */
event SenseHat
{
	EnvironmentalSensors envSensor;
	LEDMatrix ledMatrix;
	Joystick joystick;
	IMU IMU;
	
	static action create() returns SenseHat	
	{
		SenseHat shat := new SenseHat;
		shat.envSensor := new EnvironmentalSensors;
		shat.ledMatrix := new LEDMatrix;
		shat.joystick := new Joystick;
		shat.IMU := new IMU;
		
		return shat;
	}
}


